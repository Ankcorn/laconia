%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14 (Build 18A391) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 382 562
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 382 562
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: JMLIRU+SFProDisplay-Semibold
%!FontType1-1.0: JMLIRU+SFProDisplay-Semibold 1.0%%CreationDate: 11/19/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.0) readonly def/FullName (SF Pro Display Semibold) readonly def/FamilyName (SF Pro Display) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -291 def/UnderlineThickness 165 defend readonly def/FontName /JMLIRU+SFProDisplay-Semibold def/PaintType 0 def/FontType 1 def/FontMatrix [0.0005 0 0 0.0005 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /l putdup 34 /a putdup 35 /c putdup 36 /o putdup 37 /n putdup 38 /i putreadonly def/FontBBox {-898 -597 2607 2181} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEF17DB2CDF4F56425BBFD3FDC0C82E4DB86FF3F3A5E4042E7C56D8A3FC7DECFEC13CC7CC14121E07F953F1DB32D5C46DAD4D170075E8FF04293887C66553B0D420A765A6FF1A0B262F0234827219953169E836847724A69D9079DFD78087E24A881DFB9FA47C32D5FBC84F8B18433F7434DEC80CF9B60162F0294108652F1C3D316352E4A19B3232D01432301B8D524FCFB885D36A1AF39CF8417EC6276C8932756C5B82558D8D178EE180134FB6418AD84A3855EC426974E49A306EB9BCD1CC320CF0AFB2B4158B419D6BC1164F0CA8D1A602758E35A44F1FF42AE3575C337143570F5557B216DA6ADA1DDC6DC76A0E975CDDBB8F9E0FB99B7A3A60E7ED5F433E0368565C17029A376CC8BC6573DB55BBDAD1B1986C5C454D51992E4EA1967CE3A364B35E024C94A396A6871FED28B216FF8F6BFF94ADA184D3285561A2933424E95CF4ECD4E7DABAF9B548900C573FE4A1343165ED0C91FF4CCADA93C2910EF369513FFA26F7D478E2B73D80AB9D338AE6674B2B8206EAA9D963BBE373C1B27251CC168390F24496BDD842D9166AC5D6801261EF239845BB3F6EE3755FB6C29DEFC32EB318E2043A650CDB952F10D282123C68875FEA7E35548BE5FE24AC88986523FE677BB735CCA559027D1A2973E7AF3B42729CB7DF95E7FB7B552777B98B99A71F9B0D72063BC67A96C859155A0B9DC04DAD6EA8B47A1178A1BD9ADFA6F024B1D234F471B79A59B06BA4B548BC0A3A32A1DFD5359F6EBDFDF1FAEF2C0614F5CCF6DF4168434F1FF73CA0632877F40DE20AC70361EA31F60C1743B302CB82C29EDAB5F90BC0A61C35E7F366AC092134026C965597F4D8E43185E40A406C9B3851D620B08A55CA19F6B20BCD975494C8430DD1E32728469221902D7C1DCB42631DD1264914391C90220BEE28B9D9E575D8DCEEA8C2A70D599D9EF179294D37C58433E1870FCE88F6EFBA9CBF83BC034CA36CF1D360774207EDE80F4348DC9C7D459A88DB6D5E202DADC294F6C4F3D82A823F6ACDB56652DC6A99760C6685C519F8D056467C9AEAD186E8BEF2CCD0F241AAEA194E95C8D87592A670982AEF05D47B4068271A1FB04FC996BF1078DEEF7C1C196046B56D75C9A8D9495AAE18737E7DAA12804F620541DFBE38AA4B4ED5C11B27ED83762FD13A8EDC5FB2751DCB0289D1E718488B06DB8E855F4E086AD9BE914687AF3D06B99C99DE12012B254E74E53334A9B34996CDB81E2B3D09BA1809D54FA74742DDF290F60DEB4762802EC97D149D97F5FC26ED102C07B631D04AA8A09B4410168BFE9373FBF5FE3F128C945EF9349E96E0FECD6E73E37E4AF53D76DC9DC42BD0E19ED93B2A81B391B266D33911AF926A9CD6236F6D6A9E9159A686B29F8EF95D2050512E580B09E5221DBA56F0DF5C6E1D8E73288FACB2613F5D1E5CBA2689D1F03AEE3CD01120D11CEFA4CA62346CA73CD4CC28B605E39373500B5AC21CC7B83FE7EE486D839DEAD657B9AFAF776FD813582E729BB5B15D6EFE66AD1D5ACF2C34B10FA28884046AC20288ABD37C170B4D0CF0C4465E9BD243E6B5D93ED4FCAC9BC6A3B6D6472035FDB99E8303EEB851B68E77205B47B04F16FDD12959DE1017D00D92EF3E57799C0589D49967B18043E343C4986D335D42F5A70017A82044F68FF1A01DBB83B738654C26C16523A76E0FABBF8776ABB2C2560DA3056E506160DD1957FF7433562EE73A4256F5ACE0AE0CEBDF372FBF6EC6D3B28581D0309361168AAA738FEEA3EDB1AE0E4F670235ED41D5B0AB991B0FE4B30A5F955179146ED4B4ED7E44D5153B5AA62E1C0A49EFAC15220FC068CAD262E3AA5637A4093353360DE4E87F8887A3682F279A38901F14630CCE9D86BD10AB441FE8C348BF54DAA60952854C52474105529E035B651CA7E061DB0D2BE7AE1B2B4B03C6042C50F38308ECB02FBC555ACB00431F52B87EE3626D11A21F7172DA406363DFC8C6030808C581350147E3EA89B673BE0345E5B9BDBC5A3E4CEC758D6B52C12FBE76248D2CF5D693EF210B349482D4B8F744126CC69C5F497F822FCA55730A9F5435B260B0B89CD2B1EC7DEA3DB13C84232D09860A9CF3126712200C2F5624EB3D5C20871A413AF712AB8D06CFAA4364D4A5B00A2F7A6A6CB760A2BD6FE3D7B01E9512C63821845E64215DAE1F30A714D2C9A78521999AF4FB2509926611EC3A417946FC2138F876935C5DC595E10CFE6F9AE2C01026CC14E7933BAEA7F0F8BFCCD7853EEE96821926355BFAE6B30F10460A6C797DD47366CBA6781F26319FAA632756FC91E432B72E42C149D55CC9EE827063ECD56F7AB6B03CAFD84DD2B744717DA02F4C594F5EDA18AAD5D4A483E426F6B0A28780A4260ED4B7EC52317F968B4631230F196D6364C776DCDD699D2205B290A595C43FFD4AEF7DDDBA8D1D89B0CA079EFCBC628E2ECF9283F95339BE6EAE1340065807B55217A8EE5BD6D6B8837594514ACE0A077AA6C48B27C7499384DE76A62F615D4E85C92330293765E41E3E110E664F3E7D5394476EC42CB2AEA2C3FBD5E6E73ED0D103215EBBB83431A39A5AE66B265B52C65F4382CB3BDAB9E04F68B3AD6CF0C6E3625E1D2E7740597761D60499907F57E9A2CA656E180F9E48A1AFD8E7CC4888D7C131B129C4510E1F707D1981EDBCE643D21A4E43D37C75968EC155FC684E20A2FF61BC51DCA94C0E31FD93E10A4DEB1BE4AAC351BE35E952856788C43D3752DB7B4E96F9F45FE867F556F283A49376514B3DDC500002F98C332AB1D20909EFEC5EAE9C98A59C74C2E9F9B8689A35414113504A50DC56F9023C4ACBC46D0CFB90CCA773BC70D4A8402B1F6F74375F59CC674CF6A1D7E242757C8764EC5F9549F0D42C5303A6F89A0558FA8111183BA00A6FEBFF0FC42C74A90CD6506B5FD6962DBE3FDE11E6D613995F209CFE5043932A3100432E68ED45F3A4FE4CD283B3B4B69E030228E9FF05D91E8C49F7FECF48330F6295539E4A19D7646AF6F6116DDC82E68EA7514C39B6DEC19CC0592A60C09A0B3179E674123C413C531D2D99BE19DE27F66FF5E4D4213D4B82F15C1DDE95194465453FA9F78D64566E816FD7F501E13321A01A19A0DC035B1B9A65ED1792B68F88E412709009DA66822FE7EA50978C3FCA0E6E9A05334AC8C2F7800475EBB167FE51252011507C18953F1099AEF3329241FF0186787F77E22D98C92018FBD603F610AA65C59194CA24E26D92238D84C3D64EED0FB0971C5204ABEED26B9E056BBF9966AD7AB4878C3C41C475D55F96EEAF5E9153FA94A46FA238C6FB9571ACF80585A7F11A31A492312736A02E4D067B2F298A25E8E1630ED00039E8D79756D5ADB6BA62FDC735478BFA15E2BD671BF075EA74AF1D919E16B03FB035D38873EE03488B4455C37EE60193E3DCCDB09C5879DC2F051AB4A94D94D0A158ECF288BF38CE239A237D86E896A07092D2528E719F2B88F954C2758C0A624EA6DF0021B8ACF871F08AF9A9FB8F84AF1A65A32FEEC12E1379697622B94A67B744805BC14B9A41653A9C2DB7933C26EF998B33A658D7766AE4142CE7A55F3435FFE57806F6CC576C370EEE2B16C51967035C44D18C827338A2CB1EA0348877D874BD5321C2F06C6282D204C5C4C9A61C0040844FEBE9C376E7075FBFEBF2509B24AE022D5C8F2DA0E8FD6800512F8366D379CE3A26B828DBBAE437ADBD1DFFA83381988000F001B5079FE2EC7AAEB54A1311C68025AD84E37E6C786682C956A6F939E568CB85C5A17A961E2D5955E4D1A9FF37769768766BD96ECE9E105EC078657CA0F6D39066753E0F638E39A94948BE43E71FDCA7EDEBD95D4F316D79C815ACA88D7D9A3017DA9BDD7C109F57CADACDC93793EAF93F14127836142418F86FBBFC7B7DAD06B3B16D4BDF411089493DAEEA40C69F5B8E6B4B270597F360890C418E58ED5F50A90707D6DC9597131EF213E7F1DF6050FC6001F3E6AC0DC4025DF264E69E0EEED4652388F42CA8B6015D115AE10C91B0EEFCAB670F77C784CB66A7D6195E090728E00AC3C9D746D3DAC172FABE1397EA9BA4F69628D8E25982A71A6A313E7E141550B863EFE505A224F1005FC2C005512F37BD98C7B2640A5FD52D193E43AB48DE2578BDE53F51824B2664032506806BE37BDE7CC59EA9A38772341EC24DF841CD179EE319DAC0489ED769BE08255B6A94C7335A9ECDA75314271ABECEC924A824E5D78EE9C0A59EB6D89CA74B884299E8C8E150B2E32878D4D971752896BA1AE71BC8042C02D9A05D60D954F9993CA7DD84B9106D7E7B2424B3279435F5053ACDC662047B2975AD1984F651586EC1E0B567842C3305A84A10EE86D8E84F87D648EAA60294236AD49C922664419B40A5737F3686E775D25E27FF6DA5D4D39FB3CF56719D74E531CA86A955D4797CF99A0805CDDA6DCCDEDB0C470CD8919B6E0932958947B4C9FFC4D942027A2DD82C52F75F45A66EFC60E6111ADBF474087620D3128BF6BBEF36751075FE0BD10340EF56ABF4CC7CED1883F51902ADDAFC25B1345F12DCAF4579F443A4B6A0AFD05067C82D468A7D57F490C42D901ED04802D58C092FC1CB6DE87F4189A08D2733CF8C5EFFD76C5A633C748223CF543616681F730DE88F26F74DA132E09114C320C117EA4FBFD2FB3C591DCE58A2E8DBCB50CA8DC2C3844FF894F83DD070C6F3844B40D0EC7691FFB5B6446C38C942440DC9D643D54F1289FEDB11F8C79BB65802E31942B696678C493584A350EFA4E9884827C9C53A3C8D5D304B59A6568A9C81F00AC93D8E464D1E33B8E4EC247E7F1FD58B2158070F5A918E37DE0235B124B437AA3E7F0ECE3CED11C04750914B296DB3F30D8FD5B02C6328B5085213A68659B79CDD893477544782E1F3284130DD194EC0D62E4C71B13999859E52B9FD09595ACB74543865CED12CF27DABED39DE1829AF477BBF75A6563C87F592E78E5DDB0005021228E836E0EECE2E03730304AAD2F61F8794C428EFB2BAEA4E4ED35D51D7484A47C3547E45251F58742604A0959E46C4FD9E15926A75B9EDA2B6B484FA24E390622182B881C5A6588244B4D3BEC9AEE23FE2C29F231D68C9471C77352D524BE05B8219061A172327ED1C73B8D42E8C3932BFB519A44CE287073F89C51EC0B16EAAA67E84FD49926FC6A1C2D51E5AB30BCF82F7E377ACB1F0452D4F06C8AFCC558D80F421052A1D698840D53F6D3CC6C222E8F28D5F31FE88D84179A7636386CC5015F45235B57611D35E6C9A6370D81461AA0B0524ED57362F0929D963A535478A98E9C5B4C8FC52FE91AB90729E694143E32798675DAE81272DE5B649493FCBF50764345ABD7A1C0ADA42313D21FBA1CF3CDB65B3F85600330695D3D1036FA2243B821292CE485A39713E93347A1A7B154D11019CC1C4D9BB73ADA36A3B8CEF97A6C38F99D15FECC0F70220411063F644D581E448D8AF751390AA4E79C96E99D9F0EFF08C3421B4D07BAACA2FEAD28F04E68404710E32804F7123D5065D553891D8AF86255E43830AD016FA1025741DC2DAE795DC07B07E12C585E4E90C3D6E1826079C6371F3C9C3C139B00BDBE9ED79255411ACEFAEC9989271A035E5BE24278A8C2CFD391DFDC6692EF521504AD84EF8A4DABA3E3E263808E9B0E1036ECCC6F469EC88B65D751F4125BCC92871F25C9C5B697E76A41700E3925BA156560A33548C5D3EFEA7D28652D70325414AA7D259F8A94A2121E0CF63606A9D81FD445DEAAB7A01C49BDF38D17FBFB9C868440C3B3C6190EE7766186D1C63A1779B07C6404B31573ABCA0B6E1AC1D41B43D099A29BC19FED104096FBC82D4FBE4DA2DF0B35F9A7BBA5D2BB9579A889CC311EEF48E3FFF5D53A6631BCEAB25FAEF83A80793A2458FA7DE64314054163F21F08035B6168070349433A5A97AE262A48AF15D101F58727723C0C2331876735435FACC077219EB059519134F8ED7F0CB0CADE2FE51BAE54B78BEE508E322904190DF7F3523995B4C238FC22F47F3DF23F606BDA86E8C10D2C031074CE30F0686CA4192A51AEFFAB43F5363F4620078D32B705DADA3BAED21C61FC6A28A4D322F964BAA59E666678603E5309EE8984BFC42AE3FA5431F5609C3D19FDA0E90DCB6928BA9E4C96DD03D5A3D82E84071A7FBCCB602071757763960DF14E05F0637A691AD0AE3F01E73850071763649C606EA7D939C22A2701484FBF574D6D9B8260596485A35132EF119B4BBD372A7056E4DC03BD1C24444806CC4903E077E2E3BDEF7D7A96E082055D7D75682108FAFB609AA9980EC51A50EFAEA2C321022F0128F51F3395261AC2AD2852DFD2E52362240E70DD609903E67415692500B86185B8DCA5C617E4A7C76751150DDEC8F7ED10624CE4E24F340A14CC9B35C499D0A8CF0C82A00F118DAFDF1C31F2833FCACB8AC4C4FC5A9FD968AAC63A9C7A613B802909D2E1CA44A7C76A598D09440738BBE728C817EB3CB4B47FB6B04384715AD02FBE6C17B4C1CC71F05CCDC27C0F4CDCFCA985CEE5A686CE11EACE8055D8C191CEB4B9F617027F444787A5801E4AC2C522003D0659EE240C027ED9A5F0924A8FA2167BB645959B4FEC6B7454D2229096FF442BED64F269C149749D44E7E41E5639B395342A1622F23B1BC456F9C1311C535FB5B1E264C44217E7749A7104874E01DB216B7141B55F2F948ABE6E27FBBF08996EAEFDF2D36760CAE27052C50ABF680531BE247E60D13F8FB45121B24DF76D36E8E4008DAC47CF026BDCF9C8849275328964D68B4219100324FC5CDEF99D0C78EEC7C1820AA7B25DF29150082F5F2ECF1CBD04B3BC16BDE2A39CC93CF035B66065F00A02CF330F8B703247C50565620274D8983FEDE9C235220906D2AAE6BE8B382760BC90A6C59DE7B5375A89E19A400E041D41CAD01338449F361E1720C331CAD89838133DBDC35BC83BF877F05A57143AEC4B9D718DBF2EBAB96D24298006AEE0130A8F496FD9169FB39EA9DF879ECE752F4CD4D92213A3896E6E8E5A1CF2F529CAEA3A11C1AFFC3F9BA64077AC58B52A8038C9A5B40FF13BE2332F237E29DCA7FE6C584A8B5932345AF06ACE3CDF0D99908BCF116AD6A1ACD80E37B7826BC3067D9035A840F4143C13279BBF14510DD7B8FFDEA5C59521823B83642786260840ACD1237C3CD8B262EFCDD9FC6C449E792BF62203FE9D8846AC675B8630FB28B9EC21843C098A08DFB3D82C3614F4223F6003BCA7408A339F97777B24ACF1038156AD1DEC2445A9D4BB8A2F03BDA46F7D06897E97CA120CA1ED00B34F4C79A2DD328924739D8906E538BAAB4B7F431699D58E78A94E334A293FCE53F7ED7F29CFD46E5D3174102F0062EEE6C607ABAAAAA62B90D181063244F9BDCA46C96E4BE984A8480BAFF0AFE4B9978E7D7EF50A2DCCF4F339D8D034873BF1FD15288DE313A2E15170ABAFC7426656C208A67181102CC8A79C5F29C0DC30E5D1D8755579669A8209094F88EBBBBDA1129FB340A9831025C7A81DB082CA1AB45FC3F4E5EB5BB5DC0C732041C7E771E52FB470C5D179E3ADBFD7D585D76C8CC3BB06962EC74DF1CB3A316BDC68CC820A71117F39B64D3C301A732F4C390363D9FE4273E24589ADB87E3094725B46F7273BF66A03998BD0D14E16A1B7896474EFFA7572D9D2E09AB1BDC36F2053B23C24B47850C837586BBDAECAC94F4D9A2C3987339FCF07BD56FF0C2C6134A5511BED0388B6BEEA38DAD9D7BF010A664E732D38997DDEC072708275DB99D35B0D647713029096C73F1B4488BA11FFDCEF529E8331427CA0A4F7D47F99A96E77292952788E1F38F2310DECFF5516152DA9DF3DDDDB5F19375DF4493B4945A8566E69CED12D978400BF1920B08E0497EBAA26C818B7BB5D4FF6D91C2F7668F0540625BDA3210C926BA78EC94B6CFD5D6BD07CC3BE1E669CFF97BAC983B7C1CD402654E229563F8ACF38B0FF031BA2587D7729B11FF25FDB712CB584ABFD1FF33E2DB42AFFD7F393DFF0D9FCFB71E30B2D9F9AB98F1A1AF4513558F46BCC476A6EA4DD72028665AEB3A0D2F5D90D503E2F0A531709E67CA767DC3D2898336332359529C7AFE48BF6D5CD1B59730488AFEE2B5F16BBE73169C7A6C788DD44469296FA44AEFE84130BD4D15BB2EC8597050BFFF54E7FBA1982BC9CC7CBD8B3D74887FF4E501DEE4AC3F797B0963EE5F6FC6516ED2D3971D36CCD045698686211F4D36EC95A31B93FC79C5A0E74033BCBDBA4E35C7F5285C483914C776E8815AF1B681112C0BEE873BB11E3CB82BE89ED172DF5E0BD80969441FB81F474A0DADD458C89748C98E20F3EF1DA3BE9FC330B62CC02AFE607220217C48F31D3B118CABB841B840F99EF1C44BC7E339C899D207A495B3E584AA22F2B49914CDB5AF63BC83BFF0310B897C1A99186B6B55BF2F1A467614C35B5F7F42CD605A0A6FCD728BCAA2B71D01430D436B1B120CE6FC8583CEF7B9E5F653AD3F57DE040D6979F02381B274693A0C7C2A9045A52C64862712D16F501122A1C97B274675C1453BC89D34D662F4CD970CCDA7F12B11AAD695B8F270DDAC86F29D3130F9145B6DB80F7DCD09CCD60F6C9F629E1D10559BF4F127245005EB8B41E9F7645E294F25226B68CD0159BEF71E0EBDC6FB83077C1FFBD869F294E00039C1CC58F0757AF1AEE698BA51C76043E1C7240382CE44FD51F12DCAEB48F9D30C74F8FBD8E6696132A641412DC7D8A892099A2709117869682F3C90F8440E2CE3D87F028A78D831B3E2CF0023CA6D55847D302D3B31DE62DE15CCA18A333EE06508F8B468665F3EEB7D3169FFD5DCB3210363E8D067640F93FA574D34255D333BBCC146C08538ECDB91061F85FEB2C96A4374C0537900971A5927AD1B1A8D7DD1CE43F8A967A3BF7EF1147750B31A75931934B1FA3CA123BAFFAC36911B30D84D0F2BAE88FEFE78CD6EF5A967DAEF216A638034A0A4EC05AE4FDB46F35D3B48B96E97D30E5AD6D8B30E8498D9A87F9342318774507606963310262811FCD1BF1F617F6426E0458EE40B85F6AD65C3925129063A700FE11BD7CD4ECDB1A7F827A8363107BF398B675D299DD563C8BCA434A5264E64831D3AC67696474E2D4FE65F30577DEC44B1AAD885530DEF7768A06DCD3BBAF8C0314F149BB1666766430C1C4F584060448946EC1805B96D85B826A67FE6521BEEC67CCBB7EF04EB2248327E60B801909C0F19C5380FA0F122EC62B84D3CC6C5C24B85597ABC07723619CC4AB1707D326181D8E7BFFFFD7F42116D881DEEACF1144548E8B80EEA210CBFB5A78A0FD31453CD377C34029C4161ACDD2996C14895E50CE4AB72661755E1D6E294B627759914CD8CBA8790FE556381A7B55D1C07D0D6D5F4F49EB0193851F5CC76E4E55B4C69CDA4F10206D17B9E823F0CE26E46A75BFEDE607984C61A2038B03A756733DC9358D1465A231A78D749FDAF8A9D4E5417718084937B4E8B3B960843D6D2AB3AF5EDC03FAFA75CCC993E5B3E580FD54B531B98D27BCBEC6940AAF39E22E380E906E77B60FFE3FDD004875E1F9C6177D8E6C18B216C90DD07D5D567C7CF36E3605EDC9BE6EB76CC68A3CED0781B3448457570DF9876862E7C6551963EDC52130CA22A226C1A200E1D476305EAD800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/JMLIRU+SFProDisplay-Semibold cguidfix
/F1.1/JMLIRU+SFProDisplay-Semibold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.11372549 0.72941178 0.6901961 sc
q
63.253014 462.92618 m
175.67279 561.55859 l
377.51004 465.75519 l
308.69406 256.57556 l
261.89334 241.62651 l
175.67279 462.92618 l
63.253014 462.92618 l
h
W*
0 0 382 562 rc
58.253014 566.55859 m
382.51004 566.55859 l
382.51004 236.62651 l
58.253014 236.62651 l
h
f
Q
0.16078432 0.50196081 0.47843137 sc
q
0 432.38956 m
153.79602 430.50446 l
170.68272 386.57483 l
86.330818 259.69879 l
0 432.38956 l
h
W*
0 0 382 562 rc
-5 437.38956 m
175.68272 437.38956 l
175.68272 254.69879 l
-5 254.69879 l
h
f
Q
0.11372549 0.72941178 0.6901961 sc
q
186.3278 347 m
74 174.50594 l
240.29102 127.54946 l
381.22891 208.47142 l
381.22891 251.27936 l
240.29102 208.47142 l
186.3278 347 l
h
W*
0 0 382 562 rc
69 352 m
386.22891 352 l
386.22891 122.54946 l
69 122.54946 l
h
f
Q
0.16078432 0.50196081 0.47843137 sc
q
0 0 382 562 rc
1 0 0 -1 21 107 cm
/F1.1[ 110 0 0 -110 0 0]sf
0.27539062 105 m
(!"#$%&)[ 27.136719 60.383789 60.168945 63.337891 63.391602 0.000000 ] xS
301.61621 105 m
(")s
ep
end
