%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14 (Build 18A391) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1633 435
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1633 435
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: NMAYWZ+SFProDisplay-Medium
%!FontType1-1.0: NMAYWZ+SFProDisplay-Medium 1.0%%CreationDate: 11/19/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.0) readonly def/FullName (SF Pro Display Medium) readonly def/FamilyName (SF Pro Display) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -299 def/UnderlineThickness 145 defend readonly def/FontName /NMAYWZ+SFProDisplay-Medium def/PaintType 0 def/FontType 1 def/FontMatrix [0.0005 0 0 0.0005 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /l putdup 34 /a putdup 35 /c putdup 36 /o putdup 37 /n putdup 38 /i putreadonly def/FontBBox {-879 -603 2585 2189} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEF19B8280351BF4918066B2A03E67D3EE6D67422506C3BB248296286F4CCF625F780E2AFDC613004E90C5EFD8EAA54C6C9C688C645B1880390E8B3DCE91E240D06539F7F2CC5C95CFB8345FF83D708A9C0EEE229D9BC3AE3F236D0BEDDE6E8129CAF567F48DD2F82B54522DF43EB832ACE1BDB1D993E0CC0B96892C2D95A80C43411EC2B0D860E044D5270BDDE82F0268C97180657625F930C851BFAE6E31BA9ABAEF215FD32F709727792792F37828CF86AB54D5AE3445B4B2420783D68D9A4EC2146A15331424DE75576D71BAB39A8CE2662207EBCA791AD23029AFCCDF91217A1E894FB5CF96BF46D49FD6C4B3256E753A489732BB644A9CB2A2D1F819B5E0338CBE0BF6B846F997AF980ED2F7F9C684F9A4C8AB915331AB2B8AC3158FBEFF6C581FC1DBD8B226FFE4E4443F0A65E6F16FA055F13C55169CED6EAC79AF26A700505336C87C34A355E83A6904524AE4681B9D3C57AEA625EE886AF38A4DAAEAC6FB820E5D718A507876558A5CF0B9AECA2899D8010B10CE2767ED0248707CA1F95A702F7DEC24F5004D1CEADCA4D83AD70208F135C3A5DE4F2D99205BCB1182809CE16C898C3A0061E58B4EA2DCDC1ABAED8EA01F2083073678AC33C4945CD5DD936AB1FA869D2383A739F194091009BE7E535083FB56D5EF5DFD9E1763F4E2ADB56C41E2A8FDC360139BABA24C8047AE884EA1ECDE7CE70D49785D982D17D63119FD6C02369EEBB3CFFB5C6326C1168B1D7390D7130BC84D382C5755A1F3232E65E9511BBDD5BC7DC0C11A3D026B8AC0CA07F724B6E7AAE84F43516B111FEEFD70B7597F680C37259B74DA34CC06F17C2CC4C3B3192EAEF178D6C621E30E25FA2FB7C33979F758126B0C3737300DA8F9B61E0DB4FBA335C191414E12E92EB30E4D4CE523108980BAA513EA364C84CB4D05295CE4DC7AB78CCD189E20B459115E1C03546AF1A6E022F0ABB69F4B30E60A98BA395D3403033ABCB549CB30F655C95B2EEA4E853AC0EBF493ABF0CAFFB2F6B68FDDC6D23C4FE7E69DDF79A14D08DAA0793F03C66F33D5888F84C94149786A68BD3AC278851839EBD8F5C60C1C2C4FB9375EA63EB918DD0CF1E0DD83AEBE56555E287D62D170A5BE49918A64EC94EBFC95C947C67165CA75F83715CA6908BC2754353237F7C2711B08B4418A646DBD07CA709EEF64EFEEA9D352F358DD130D1DF08E3FC5A669729A99B7ADAC2687FC4AEAD3A01713A05E99CA43493BC4DD75B0E9B7EEBAC1830578BF62F93F5DB51B99835B5E77558FBBF1C5F0647072BDCB0AB2B11323ABD8301AA84DBC7AD256D336B5357A058F3788D7EC409F2CEE644423F01EECF6B7919235C854D1A64C37BD50A97712471DB0EEB0736D3A54E1F4C24419ECD65DC0E5C1A208EB1B56D3E37CD251A798BA155491AB2B33BDB586916FB9055231CB883AD0550EC609677A4E10A9BEBFCCC94B6EF9E4DB1040DE950FD2576F5AC23FE5B419AD86229278548EBB0CC70C85C4BBC05EF8669885E1776BCA2F54A28DBDB5719F40FDFCD046685C4B398503113AC5290516D594163BE30E35774CF2CFAD2DDE3D09221BA1AD8F4685061D3231B59B4DF626CB5BAE23CEB43D2B0430117AA6756908DFAB548953FB5A35338820141476D06EEEA9B05E7278D56B3E76CC463A5189911CC96E715B835A2F67FB76525AF0C8AF88B2E09C58283F9D7AC8271A8C07BD6B8070977745376EDDC7B1BB79C2C96BA547E3D5D57FC633C031E5AAA097F0EA5E1955B4C432D7CFB15D5405EEAA85407E192858355A2D76C1D11BEDBD7F8B18904EE31F5E6F668C74C3079BA3DCAFA967134E01FBB2C47EDD6AD931C0FFD74123F62286BDF35A9C83F506A80FF7248795A5577EF2294615A70827472C67483F57769E24B0AC67A6AD7B82469A6302BE52AD33C325A5A30245C78C0AC2BDB449154363E03AB9EA82B762D17799965073A42299E7F6ABC1FD1FFB41B14E3ECD88CDAE07C4D0BEE09B1A5F37808C9233491DB314C528BEED194827468EBD350E450360E03B224B9A6715073F7C81C47C5513A0E9FB234DEAC10AE4C4E28647E0C812800B0EFBB12413C9714881901CB8679605436B632AB61FC574CD5CA658757D0A837811B7FD9C5A4008D89C2A84582A5969997E6B08FEF4A95DD573E248FFC95042B940791D081EA95C742CFF6AAD939B0CE345010595C06A540DA2298BAACA67CA80ED8F5A034EA335FD47C7B0562B16E506D89BF587A4A1BE045B3F879F4ECC29BB8F9547383D1447FD80DDE0074886DCE56819DF061DCE5A4ED00A5D746451307BFAF00EB3F7DFDF5A0F6E9E98C46D774764439BD94A863C08E50608A68828DC8EEEFBAF8BA0FBF6CD19BD84DABB7AF20F74E6164B5327A25C59AB183011D7FC109C875DF60301250D2EDC6AC4EEDCC88B2402FC3900B4DF39EDA5EA1591A170EA71CDDF3CEF961F89A47698E507207F35EF4A582E966D8F84D20A133BE1E24ECF93D252D30AF8B78133A925EF9BE5DE69CFDCB30C5674AF5EADA5EBFFCAB3543A30706AB3190E7C9FA26187AFEDC1739101F4B7472D5566F3A3B40453221B8224788047257E7BE544E7FAD05290F526CEE7BA2F49A362B21B35A166316DEA79A031F9AC5CB1A4C2B7A86B0B2357826835D5D8980959BA246661431881098451671F1CE1D9AE2B77BE0A99C6477501A8F831026EBAA26407D20C64574539C0370E6BED6960411AFDDB3FFB465DF5FEEF1BBA8F86A1895551BE6F97E9F43AFECAE7ACEF2B2163D078557027641FE532A077A6D50CA4A47A41B871195B92A545577426278336290A2D19F7B74F1576695911DB28A928AADE0C13268435A220B540D466D13BA23843D141BA330A421C0EDD1F02615B9E43FB69C183581C953DC3A49E70F1372F06877FF882B4C38E00FD852D5A59EB2A48705D2652D69F44248C482CC3AF973457BE72D53D91A9ACC489DCB81089DEA34D92E396CA8EBEE373299373C2E5A1C84BE77D410C89CE91BDDBDCB5DD1EFCFD507944E8B3A675DA3F4CA484C441EC28EC497599E2EC56E748C0CA8B46D7FC913516B63C4E1FB6E0C5270B9D7F4D047744FBE8EE7DF88398A2A0B3AA1EE5B266E5BDA2518186FAE661E5EAECCA0E64D6B6754E0171D538BE45737A8A97D802D99A8671E03DFC7208DC9CDD1247699E0617177B1A8EFA97EC4EA059DA721A0FD3AE310A7C2429BA1A5849CD816D58CC0ADE3BEF015C52BA2C02978246CFA25D0C5B19233BF437C2C595E74CF75AA9824E12AF566983C569A78374AA15D6E6E39463C67C405D230470D3A252076A74FF6A3C438081852E26E57692F961E2D597879715D017B059B64FAD7FE100AFCC43DC7888DE5A29F7C394E900C0946416AE824AC814DE20CD41D4230B9147EACDB7ACCFBB4DF9DD727F329C6039C00ECC927D33E4D0F568D33465E833902D0DCAC912153E3E21FE0E8E5EB0A7C766B2949DF652E43A14921FE135B6DF401561459456A96FA50B1F956492FE8EE2BD9C89AB6BEFDA025673AE0B2AC5C0BB5504C2935D5C64C6CDFDB711EE782D6314D905257E8A336B6CF95E038325D9FE47E26F965A3F6501AC045BE72C5D90020559D477843C2246D1711F84177A621619107DCC284F6ED2712CEA57774046660E2EF0415509F0D31A0331658289813EF2B59FB58FA2FF3E853E8513F2D3B1CAECFAB9DD7313E24646A8AB5ED1E8F860A4359C639968E89C5E1AFA97CF37BF96BFF190500BE7F95A62CF71EAF4B5038E1736910D97A723E572474F7A9797AD03E7C3D55D4E623B81037B239EA469FD678800B45C8E1F01FBC8C9AE7C1BF08480DC5346052F4B1F78E11195930E33340C860FB75E5B68EC50314E45051A7959DB832E64E4F8E62B3B2E5703F71630AA213E267D8BD4F16BD9011DCB97747BACF22B9C45CE77C7D1D2898017E8702CD6FD6A0F512ADECC6F7AD23F155C8101D0FF298C1BA3EE338BF586D42B95556438B7E1FAE93A868889C2DF557EB848EB9B7BF9B17BA6DB3101E9C2D144B943B4169082BEECA4A402C1495D17EB774D9250BADFC80105AA40C11CC894B8EC1629A35F1EEC0F4AF6759F7CF4012AC7B7D70B76C5E6A18AD89DFE9363D2944C378A8D604BF89FA89AA1DF83E252B0B2E08C10072BDEA2C708C466F31BE3B700FD71C0C2F908ECDA8452A4CEC135F5CD4D815105EF75723F27D8A081352282E90F9B4EDDC956742404828471D2BF63214F28B1E315984B8426357B4E56D285F34E9813C4B112A041C5ADA7915F871B3B94920D059D339CB9F9409A6FD96C279F9B1162D45DE7DB4B743C2FF104E1679E06BE4E9BE3FBC9C88984DD390B89A68419F336E34069CBC2E53D2363487AE238AD5A6F09D431789974E382A6A57528BB17D4F5BE8AC80333823D00E9AFF8737640DEDA61A3129CEA0BE5710062A0BB8601BA1DEB2289E0ED9A53083462345E8C7AA47D84CFB2DDB7E5D0FD4ACC8D001546724BE0413E450EC7C07356D68B51349D5E1124E24AAF74AA3372550D99C662257D62BEA82B460F70AA5C395D9FF25F25235680A1D1B2B92CE7897D869E74F82FABF905DF1F6B60A931DD774BFBF635E008A882B2BFC964FAEBE5D2D5D0A121DA47FF3171290DE7D6CF537E2398C7F22E713BBC46733656EB96339BED9D2DD8D2558F8B6EFB8C5768A8FDE9FE7DA711ACB95351A76857A53691833B50CB3F2AD055B492DD142AD29D3CC04FB8A065C126513AA61D43C3F9DBF7A52B7C742FA89F8F5C801CD1BBD3B9A9B1ED2A069218F324D29653B7678AA2345D514AE4CA35D463B99552629080634274B75586A2D2D62BA773ECD11D5CC2DEDC5F5277CAE62BC5D0301B99D5BB38CFA64A49570C9EC323A895E33D29FF4451AACFE49C88414B08B58E19D4820C9ED0A67D5A78292D6A384EA2C9BF6B4F5A01F7027B6BAC57F02863811A9C9AF04E6C983750118396A20997A7BEB8593E8182DEB0E5684C0945A83470F2E51C356F60520AD3AB08B2CBCCC2514E9945147952530AFB34FF50EB8CA0320A2BBE8CAA3A3432C114D7E101BF46BB42F7C4A1FC725D32758819214CE68EA4A8458B01FEAACF8F7165833673C8BB389139E3AFAA6809450EC5DF7216AE4D5F61D7547F753503AEE8E6EAFC0262A182E04A6F5F8567A9930E2C38898646D07F0CFA75DD50B5BBE1965DFB9AD27E12225F3E0142FB847B822EC8C5FAC35504CC50B4B9936E7346131742648EA81A3191E45B4CB96FC19B8010075151F9482DC5316546D62176FBB132D7B6C5DA7F06691014309ABCEE25174B2C7E66B2FF0630556063A7BC3C489ABA597D3B43CAF5D57D234998722BC1D76342F0B2A90606ED5C132E5F24037097112E5642170195D59767A51FAD23A68763EA9296B611F948DB15A9737EC95046C5D969C9015EC45C8918FD9CE2BD7F0F05AA3A813B13CE3476897201F59AB540EA1CE7CACEA689086F03FFAACA0B78CB49200E86831CE1EB2CD80135528535295B9EF75D6FDEFDF7D75E22993F6FD8706FD3F0F6ABCCD7B7ECA97375BCD5597C4A115B5F4B5CF90A179B90BBCEF756E82FC3257CC8B5C912C74DDDE8CFEDC3D71FF784B9C8D27A4B52AEEE3A5702159748782E301AA57A90ABEAFD5DEC648A87925A1F56D0B9D874A14F37C81EFFCF226EA2C8B912773307FB353F0DE7098167D2934CFADCEF2DA5E3E4C30B3B4584BABC640FD247F55710183BBD3C18F3174D60FC5F0D753ADB254A5A96692997021299E7D1D7EDEA5A6A674FD81428F35930CFD12FCBEA8ED9B1D8D95618A9DF3AC7FDC28A2DED780496C2713198301C39059037EF8BD567D4EBB07D687348644681E02A673F04C8767C635C4923F72ACFA591554E9A898585C2CA844680582AAC39293058AAD91B457CC6AB694EE21B8601E8CA1F2381869A00E9897AD71BE7BBDBE220B4483999FA88638FEA1CC8B81C2E1352D41FF23F0CB0FD840DFA9B3613CCD85C35EE92B9AD572BB35C534D3DD117CBAADC85C5CC3BAB1D21EFD3BA0DE98F2C48ABB6322A446576DF4011312166BF36915DD422445CF37325BF9657897F76DC9E3C50D8D195175D3DD509D9E7F10F53D170C993ED8DDB5650F6CE2A7284A8DB4969CCD95B53593096EA5930D258A65B94A45BEC98E52948A793E1935D597FA8A3D1F8CF895518F40F3509295E1B96587EDA14F105B60A700E95B70F2518F64DC23C27AD19A4D5E274F340A38ABB892B22AF993735A462A8A1C36A0ADE08E462C2EDC101BC0E6DB59345E9C0BE58F20352C44C79F87B1CDA23E672CC849D345F655725C7459D5BD0D9440AE189923231B46C6686F17327F4D4B38E917D741A3F8CAE7709840FD07291B04942A39AA11FBD5C25456128B39FBE3266F41E1B197111F5290658334C53BEE401188F0292A1FF87E87C0F7BA04FC6F8B79C750FD607DD4D3DC58643588F09E4CEBBA396FDA51AC406D82F4EB1035ED3FB16E0EFC273785539337412C9B76ECEA78FADEF9731E6AE1491FD7EEF1CDB91E20FAE8BFC172E9F91CB0A5D0A5139FD3E1B7C5DDE0C80452F7EFE5C7C0ECD3D38D0A4BBE242A35AA2F32A5FA0CD7236EF42715609A47B06FC3B638DB49BB3252A426A04DCB16656470DE048D73DB0460985EB16DA0E8C295797630AEC0454A96AE826A5A0904435C06742978737EE25CBD9F7ED0179AC72C53E66D92E89DBF252CD3B2C33433BFD326F0864F8466FD5969BA8A4094A824D25612B526C40697FF6752898347B080C39C737FD060E6FD79BD82357DAD971CFB4D76B7195BDB7EA9A7FC8508DD4DAF74E187E9A58D3405FA7ACB88ADDBF423AE01E96FDA440E63B21BD2EF70562F62F132452FE700C24FA8875285405A27C70B3516B2EEC31A230F261D8138504BE7AE1A8ADBAA1E88586559545F6F4DC8B18A7594DA07E43A8EC13DCFFD58983171F5EBA7B30273D0AFDADEA0EEE19811CE1419CEE0A0CD98AB36DFC79E7B2D713FA06AF968C1728D918AB62193F8BCDF2E3A472EB9A6E4EEE511051816F2FB03A63DED544E114306B1ACDB0AAE883D2042F8400515977BECAF893DC58D2D68023F724B9A9132AFAEE96F89B033E5A3683580AF69A3DF776699E6249F2560E159484659868DB5FB23803C19874A5BA649C4DE0455C5CAC5A23AB54D22B238BD1482B3F321F49217D53134A521F79109BCBB27C71933B6F4242AE0CD3DFE9C68B679797A73C4C2740D0CD1F1338163551F4CC9BCC8E50A9EDFF0865E4D71F339400CDE09C75A70E4A701AEEB5DBE88A0F7B6DD519B8C0549024A8987487386372AB1346C59134CC038D2F6BA9BEFFE3C34E6B5FA13B3A3FBC02BEAE083F9977A102A5C572AB48CC63F736AF7D67759A0576F362C7212CE4E0465A6A8858726242AB2A51B177DE31DAB47FCB5D535C417FC9F9B2EC67924A952CA61CE0272DB1D92D200E5679BA966BECECB4B773A43F93578DB144BD8D4AA5E0D3B3A2B825EF680287F8713A93E3620BC63D42648DE02469B13FB26B0641DDE1743DF42419C92101CD66884F0232DB55EACCF64F9B22227D76C47A66C71F36AE7668C4A598095F8944CA0E18C87035B1BB7591415C4D63B52C039CBD105D7AE83651DB66B9674483DF6E0870E4FE4035F00846BA39373CB6D9C1656BE714956BB117453FBAFA314833F4530BDFD8B9897A437EB357732AB6734A894B595DF33F81427CC29FB8582D90C326538604B620060C072ABF56336F85F7A45CF8785734821F042145AA77404A4580AA5126514D9D0D5008A07AC4D2A40E38C874A44A16FCECC48047044B2F6E90EE04C7AD08F0D6C5B7E3F07C537C3C7310F29B921A1A95DCB95C5C90009A061851566B249DC376A83D7D9BB46F07913680F66DEF424C2C8A0B89EA15B028ACBE5B35DC4813D5CDEC40DFC43B61659B42FEEF0390E39ACB522EFFF6F419AE1F177D1324CBC0116A8FB4DC210ED01DB0EF3428C2B7D67D28C39207A521A4373F87FC83DDBE7777BFED8982F2EA38E96B19137AA9903C3A52BC4DD75B286395B566CB685C0A4E66CD2AA4DED605DC6AEC12E27CB80AA7307A1C978744218AFE0C4D1C12DE53000DBB5672A09A279E8E3D4698F12FA276C588532A654549A5BD518BE38EDEB61826EFE3D651E0301E848EEFE58A20D916C918390F72AB65858B8DC1416BB458DFA1548D855940D4E9D1E9D2BADA0B18B7C39DB4E26576B06091E0099B6A42A612495C04776953C69D2732F23547143EB038E51C8B2F957CAF53C211EFFB79D7910F03973E87C87BA89D13B6251B85B786DC41993FEAB191DEE8F3DE185B1F6C891ADD87DC854D82672A93992FB729E7C4572AFD35CAE0E017ABB4E7238844C0845B59DA50328ABA8BA58FC181B5E95BB85DBB619A502D7EC6D963255B4473A44E9CFE7D76C982ADF2EF71F2FD918DED5249FB50A8D34FD4D731EEE3905D7736950FC58030C4C1749F3A9962D953AF02C2F51B6C314488AF531DE9A8E8BE8460934E940074D0705449D46B56C54D6A0D1F54376B60A2CBB8BE9C4E9205912FDBEDC730D04268A028995F8296A8E9999C35E1635BD3A41BD5783F61DBA8B2FA2B7A0F49A9A3B448E8CB278FEF7EF96223800DD51BA87B32502C9FFD08752DA638FA9B3BD19B20E63B0CBA17928A5F3783BEE222F424A667038730B7F0BB5ABE6B5DE82FFA5F6C90A1BF62A8569A3C3B12000304AF80DC1A872DF2CCFDCB6379DB752EE142746212C7A71DC6E51A48B39A2435BE3CD67682D6F8A58C113282E910640CE326AA85976E6E79DF9AE81DC2542E98EA56E8114EE1F1876AE4F786C542A9D94431FE8176971678EA3492A16C1136EAE3DAFAD77D231573D187CE5D5A5EBE0E0EB0F794E09CB894B8DE566BDC9DA0CCFB89C0E993449A5B1E4C91E7EFA669C50BC856C8B7E685B0ECE76A1A210FCC946DAB60D69A11B94CCDB248FECDDD830308630F77DB7C31E60C67D7A9BFC85337D66786BA9D276712527C6CF4A51CAF8EC9C0576F77A9DB0972C54BFA29C21F9ED9DE66A5D686D758BB544FE33545CECD10CEADC46DC81E982089A816CD0008168C5AFD73D411CFA1E08C86B0A23689C1E26969CED88BCBD72E36145311941FE5384F5D4F152FDC65EC98860FAFC6EE1B727A66F1C50699E758617E11F1B36DFBA3D5048D0A84C939AFF55BD86F1E37C0A41074E71D31A28D3F94840CBD1B88779AFA832DD323FF3FAEC9A5F6007A81FFC1B1FACED0201ABEEA38C1AB81741FA70BC8EAF0AC4BD815F27C81BCBF68EDBD482FA174C56E93B31115DE688440699DCF72553927CFCBB8BD3A055195FCE7ACE06CF0EE09CB404785B8291BBE04216F8318EDD4A92ABC125D621C3DDF95F4942AF619F48A618CBBCFD01EE324DBE4A8C9390C963A260EC84E866DC6D484FBE4B683898D8F3AD2A6869B7429C3EE1830A22A3941865F3FEABED06C597A0F3BE908DD7C193AD06ADFBCA5BDAD06347073E0F6AA988CAE3452A7E3D13E989AB2919A470CA7DA8DE17218461FB5FC6AB8C52A887C32F8781765CE4D05AEDCE3F6EEE367CC1E6764AFEAC11EFFBC246C4D88655EA4AB7229BD7EB477D90AA96740C5165CA20965AAE062982E92A433B1E3EE9D2C59E88CAD4FB0C092AB5B8FC9C821F00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/NMAYWZ+SFProDisplay-Medium cguidfix
/F1.1/NMAYWZ+SFProDisplay-Medium renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.11372549 0.72941178 0.6901961 sc
q
63.253014 335.92618 m
175.67279 434.55859 l
377.51004 338.75519 l
308.69406 129.57556 l
261.89334 114.6265 l
175.67279 335.92618 l
63.253014 335.92618 l
h
W*
0 0 1633 435 rc
58.253014 439.55859 m
382.51004 439.55859 l
382.51004 109.6265 l
58.253014 109.6265 l
h
f
Q
0.16078432 0.50196081 0.47843137 sc
q
0 305.38956 m
153.79602 303.50446 l
170.68272 259.57483 l
86.330818 132.69879 l
0 305.38956 l
h
W*
0 0 1633 435 rc
-5 310.38956 m
175.68272 310.38956 l
175.68272 127.69879 l
-5 127.69879 l
h
f
Q
0.11372549 0.72941178 0.6901961 sc
q
186.625 220.04819 m
74.297188 47.554127 l
240.58821 0.59765625 l
381.52609 81.519615 l
381.52609 124.32755 l
240.58821 81.519615 l
186.625 220.04819 l
h
W*
0 0 1633 435 rc
69.297188 225.04819 m
386.52609 225.04819 l
386.52609 -4.4023438 l
69.297188 -4.4023438 l
h
f
Q
0.16078432 0.50196081 0.47843137 sc
q
0 0 1633 435 rc
1 0 0 -1 521 433 cm
/F1.1[ 360 0 0 -360 0 0]sf
0 343 m
(!"#$%&")[ 81.998437 190.103906 189.576562 200.123437 199.596094 81.646875 0.000000 ] xS
ep
end
