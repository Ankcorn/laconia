service: laconia-acceptance

plugins:
  - serverless-s3-remover
  - serverless-s3-sync
  - serverless-pseudo-parameters
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: ${env:NODE_RUNTIME, 'nodejs8.10' }
  stage: ${env:NODE_VERSION, 'node8' }
  region: ${env:AWS_REGION, 'eu-west-1'}
  tracing: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
        - "lambda:InvokeAsync"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource: "*"
    - Effect: Allow
      Action: sns:Publish
      Resource:
        - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.restaurantNotificationTopicName}
    - Effect: "Allow"
      Action:
        - "ssm:GetParameters"
      Resource: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.fullName}/*"
    - Effect: "Allow"
      Action:
        - kinesis:PutRecord
      Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/${self:custom.orderEventsStreamName}
  environment:
    TRACKER_BUCKET_NAME: ${self:custom.trackerBucketName}
    LACONIA_TEST_SPY_BUCKET: ${self:custom.trackerBucketName}

custom:
  fullName: ${self:service}-${self:provider.stage}
  trackerBucketName: ${self:custom.fullName}-tracker
  totalOrderBucketName: ${self:custom.fullName}-total-order
  restaurantBucketName: ${self:custom.fullName}-restaurant
  orderEventsStreamName: ${self:custom.fullName}-order-events
  restaurantNotificationTopicName: ${self:custom.fullName}-restaurant-notification
  orderDynamoDbBatchTableName: ${self:custom.fullName}-order
  remover:
    buckets:
      - ${self:custom.trackerBucketName}
  s3Sync:
    - bucketName: ${self:custom.restaurantBucketName}
      localDir: src/resources

functions:
  place-order:
    handler: src/place-order.handler
    events:
      - http:
          path: order
          method: post
    environment:
      ORDER_TABLE_NAME: ${self:custom.orderDynamoDbBatchTableName}
      ORDER_STREAM_NAME: ${self:custom.orderEventsStreamName}
      LACONIA_CONFIG_API_KEY: ssm:/${self:custom.fullName}/apikey
      LACONIA_CONFIG_RESTAURANTS: s3:${self:custom.restaurantBucketName}/restaurants.json
      LACONIA_CONFIG_ENABLED: boolean:true
  process-card-payments:
    timeout: 6 # Force recursion
    handler: src/process-card-payments.handler
    environment:
      LACONIA_INVOKER_CAPTURE_CARD_PAYMENT: ${self:custom.fullName}-capture-card-payment
      ORDER_TABLE_NAME: ${self:custom.orderDynamoDbBatchTableName}
  capture-card-payment:
    handler: src/capture-card-payment.handler
  calculate-total-order:
    timeout: 6 # Force recursion
    handler: src/calculate-total-order.handler
    environment:
      RESTAURANT_BUCKET_NAME: ${self:custom.restaurantBucketName}
      TOTAL_ORDER_BUCKET_NAME: ${self:custom.totalOrderBucketName}
      ORDER_TABLE_NAME: ${self:custom.orderDynamoDbBatchTableName}
  convert-total-order-to-xml:
    handler: src/convert-total-order-to-xml.handler
    environment:
      TOTAL_ORDER_BUCKET_NAME: ${self:custom.totalOrderBucketName}
    events:
      - s3:
          bucket: ${self:custom.totalOrderBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: json/
  notify-restaurant:
    handler: src/notify-restaurant.handler
    environment:
      TOTAL_ORDER_BUCKET_NAME: ${self:custom.totalOrderBucketName}
      RESTAURANT_NOTIFICATION_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.restaurantNotificationTopicName}
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - OrderEventsStream
              - Arn
  fake-restaurant:
    handler: src/fake-restaurant.handler
    events:
      - sns:
          topicName: ${self:custom.restaurantNotificationTopicName}
          arn:
            Ref: RestaurantNotificationTopic

resources:
  Resources:
    S3Tracker:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.trackerBucketName}
    RestaurantBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.restaurantBucketName}
    OrderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:custom.orderEventsStreamName}
        ShardCount: 1
    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:custom.restaurantNotificationTopicName}
        TopicName: ${self:custom.restaurantNotificationTopicName}
    OrderTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "orderId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.orderDynamoDbBatchTableName}
